{"ast":null,"code":"// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m;\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m;\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m;\n\nvar evp = require('evp_bytestokey');\n\nvar ciphers = require('browserify-aes');\n\nmodule.exports = function (okey, password) {\n  var key = okey.toString();\n  var match = key.match(findProc);\n  var decrypted;\n\n  if (!match) {\n    var match2 = key.match(fullRegex);\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64');\n  } else {\n    var suite = 'aes' + match[1];\n    var iv = new Buffer(match[2], 'hex');\n    var cipherText = new Buffer(match[3].replace(/[\\r\\n]/g, ''), 'base64');\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n    var out = [];\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n    out.push(cipher.update(cipherText));\n    out.push(cipher.final());\n    decrypted = Buffer.concat(out);\n  }\n\n  var tag = key.match(startRegex)[1];\n  return {\n    tag: tag,\n    data: decrypted\n  };\n};","map":{"version":3,"sources":["/home/pratik/Final Project/crowdfunder/node_modules/parse-asn1/fixProc.js"],"names":["findProc","startRegex","fullRegex","evp","require","ciphers","module","exports","okey","password","key","toString","match","decrypted","match2","Buffer","replace","suite","iv","cipherText","cipherKey","slice","parseInt","out","cipher","createDecipheriv","push","update","final","concat","tag","data"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAG,0HAAf;AACA,IAAIC,UAAU,GAAG,4CAAjB;AACA,IAAIC,SAAS,GAAG,kFAAhB;;AACA,IAAIC,GAAG,GAAGC,OAAO,CAAC,gBAAD,CAAjB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACzC,MAAIC,GAAG,GAAGF,IAAI,CAACG,QAAL,EAAV;AACA,MAAIC,KAAK,GAAGF,GAAG,CAACE,KAAJ,CAAUZ,QAAV,CAAZ;AACA,MAAIa,SAAJ;;AACA,MAAI,CAACD,KAAL,EAAY;AACV,QAAIE,MAAM,GAAGJ,GAAG,CAACE,KAAJ,CAAUV,SAAV,CAAb;AACAW,IAAAA,SAAS,GAAG,IAAIE,MAAJ,CAAWD,MAAM,CAAC,CAAD,CAAN,CAAUE,OAAV,CAAkB,SAAlB,EAA6B,EAA7B,CAAX,EAA6C,QAA7C,CAAZ;AACD,GAHD,MAGO;AACL,QAAIC,KAAK,GAAG,QAAQL,KAAK,CAAC,CAAD,CAAzB;AACA,QAAIM,EAAE,GAAG,IAAIH,MAAJ,CAAWH,KAAK,CAAC,CAAD,CAAhB,EAAqB,KAArB,CAAT;AACA,QAAIO,UAAU,GAAG,IAAIJ,MAAJ,CAAWH,KAAK,CAAC,CAAD,CAAL,CAASI,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX,EAA4C,QAA5C,CAAjB;AACA,QAAII,SAAS,GAAGjB,GAAG,CAACM,QAAD,EAAWS,EAAE,CAACG,KAAH,CAAS,CAAT,EAAY,CAAZ,CAAX,EAA2BC,QAAQ,CAACV,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAnC,CAAH,CAAsDF,GAAtE;AACA,QAAIa,GAAG,GAAG,EAAV;AACA,QAAIC,MAAM,GAAGnB,OAAO,CAACoB,gBAAR,CAAyBR,KAAzB,EAAgCG,SAAhC,EAA2CF,EAA3C,CAAb;AACAK,IAAAA,GAAG,CAACG,IAAJ,CAASF,MAAM,CAACG,MAAP,CAAcR,UAAd,CAAT;AACAI,IAAAA,GAAG,CAACG,IAAJ,CAASF,MAAM,CAACI,KAAP,EAAT;AACAf,IAAAA,SAAS,GAAGE,MAAM,CAACc,MAAP,CAAcN,GAAd,CAAZ;AACD;;AACD,MAAIO,GAAG,GAAGpB,GAAG,CAACE,KAAJ,CAAUX,UAAV,EAAsB,CAAtB,CAAV;AACA,SAAO;AACL6B,IAAAA,GAAG,EAAEA,GADA;AAELC,IAAAA,IAAI,EAAElB;AAFD,GAAP;AAID,CAvBD","sourcesContent":["// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = new Buffer(match[2], 'hex')\n    var cipherText = new Buffer(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n"]},"metadata":{},"sourceType":"script"}